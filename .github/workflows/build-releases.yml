name: Build Releases
on:
  push:
    branches: ["master"]

jobs:
  vars:
    name: Prepare vars and identifiers
    runs-on: ubuntu-latest
    outputs:
      short_sha: ${{ steps.vars.outputs.short_sha }}
    steps:
      - uses: actions/checkout@v2

      - id: vars
        run: echo "::set-output name=short_sha::$(git rev-parse --short=8 HEAD)"

  build-matrix:
    name: Build Wasm interpreter
    needs: vars
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: ubuntu-latest, target_suffix: Linux-64bit }
          - { os: macos-latest, target_suffix: macOS-64bit }
          # - { os: windows-latest, target_suffix: Windows-64bit.exe } // TODO enable Windows after researching ocaml windows toolchain
        ocaml-version:
          - 4.09.1
    runs-on: ${{ matrix.config.os }}
    steps:
      - uses: actions/checkout@v2

      - uses: avsm/setup-ocaml@v1
        with:
          ocaml-version: ${{ matrix.ocaml-version }}

      - run: opam install ocamlbuild

      - name: Build Wasm interpreter (in prod mode)
        run: opam exec -- make default
        working-directory: ./interpreter/

      - name: Run all core tests (--scripts-only)
        run: test/core/run.py --wasm 'interpreter/wasm' --scripts-only

      - name: Determine filename for newly compiled interpreter
        id: filename
        run: echo "::set-output name=filename::wasm_abstypes_${{ needs.vars.outputs.short_sha }}_${{ matrix.config.target_suffix }}"
      
      - name: Rename compiled interpreter binary
        run: cp 'interpreter/wasm' 'interpreter/${{ steps.filename.outputs.filename }}'

      - name: Upload compiled interpreter artifact
        uses: actions/upload-artifact@v2
        with:
          name: assets-${{ matrix.config.os }}
          path: interpreter/${{ steps.filename.outputs.filename }}
          if-no-files-found: error

  create-release:
    name: Create release and upload assets
    runs-on: ubuntu-latest
    needs: [vars, build-matrix]
    steps:
      - uses: actions/download-artifact@v2
        id: fetch-artifacts
        with:
          path: compiled-assets/

      - name: Create release
      # Using this action, instead of the ocaml/opam2 docker image, because
      # there are directory permission errors with the docker image and this
      # action supports all target OSes.
        uses: actions/github-script@v2
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            console.log('environment', process.versions);
            
            const fs = require('fs').promises;
            const path = require('path');
            
            const { repo: { owner, repo }, sha } = context;
            const ref_friendly = context.ref.split("/").slice(-1)[0]
            console.log({ owner, repo, sha, ref_friendly });

            const release = await github.repos.createRelease({
              owner, repo,
              tag_name: "${{ needs.vars.outputs.short_sha }}",
              target_commitish: sha,
              name: `${ref_friendly} ${{ needs.vars.outputs.short_sha }}`,
              body: `ðŸ¤– this is an automated release of \`${ref_friendly}\` at commit \`${{ needs.vars.outputs.short_sha }}\` \\*beep\\* \\*boop\\*`
            });

            console.log('created release', { release });

            async function* getFilesRecursive(dir) {
              const dirents = await fs.readdir(dir, { withFileTypes: true });
              for (const dirent of dirents) {
                const res = path.resolve(dir, dirent.name);
                if (dirent.isDirectory()) { yield* getFilesRecursive(res) }
                else { yield res }
              }
            }
        
            for await (let file of getFilesRecursive("${{ steps.fetch-artifacts.outputs.download-path }}")) {
              console.log('uploading', file);

              await github.repos.uploadReleaseAsset({
                owner, repo,
                release_id: release.data.id,
                name: file.split(path.sep).slice(-1)[0],
                data: await fs.readFile(file)
              });
            }
